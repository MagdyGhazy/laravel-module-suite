<?php

namespace App\Http\Services\{{ name }};

use Ghazym\ModuleBuilder\Traits\RepositoryTrait;
use App\Models\{{ name }};
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Pagination\LengthAwarePaginator;

class {{ service_name }}
{
    use RepositoryTrait;

    protected {{ name }} $model;

    public function __construct()
    {
        $this->model = new {{ name }}();
    }

    /**
     * Get paginated list of records
     *
     * @return LengthAwarePaginator
     */
    public function index(): LengthAwarePaginator
    {
        $search  = request()->get('search');
        $perPage = request()->get('limit', 10);

        $parameters = [
            'select'    => ['id'],
//            'relations' => [],
//            'where' => [
//                 ['status', '=', 'active'],
//            ]
        ];

        $query = $this->query($this->model, $parameters);

        if ($search) {
            $query = $this->filter($query, $search);
        }

        return $query->paginate($perPage);
    }

    /**
     * Get single record by ID
     *
     * @param int $id
     * @return {{ name }}|array|null
     */
    public function show(int $id): {{ name }}|array|null
    {
        $parameters = [
            'select'    => ['id'],
//            'relations' => [],
//            'where' => [
//                 ['status', '=', 'active'],
//            ]
        ];

        return $this->getOne($this->model, $id, $parameters);
    }

    /**
     * Create new record
     *
     * @param array $request
     * @return {{ name }}|array
     */
    public function store(array $request): {{ name }}|array
    {
        return $this->create($this->model, $request);
    }

    /**
     * Update existing record
     *
     * @param array $request
     * @param int $id
     * @return {{ name }}|array|null
     */
    public function update(array $request, int $id): {{ name }}|array|null
    {
        return $this->edit($this->model, $request, $id);
    }

    /**
     * Delete record
     *
     * @param int $id
     * @return bool|array
     */
    public function destroy(int $id): bool|array
    {
        return $this->delete($this->model, $id);
    }

    /**
     * Filter query by search term
     *
     * @param Builder $query
     * @param string $search
     * @return Builder
     */
    protected function filter(Builder $query, string $search): Builder
    {
        return $query->where(function (Builder $q) use ($search) {
            $q->where('id', 'LIKE', "%{$search}%");
            // $q->orWhere('name', 'LIKE', "%{$search}%");
        });
    }
}
