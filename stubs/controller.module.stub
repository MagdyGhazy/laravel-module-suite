<?php

namespace {{ namespace }};

use App\Http\Controllers\Controller;
use App\Http\Requests\{{ name }}\{{ store_request }};
use App\Http\Requests\{{ name }}\{{ update_request }};
use App\Http\Services\{{ name }}\{{ service_name }};
use Ghazym\LaravelModuleSuite\Traits\ResponseTrait;
use Illuminate\Http\JsonResponse;

class {{ controller_name }} extends Controller
{
    use ResponseTrait;

    protected {{ service_name }} $service;
    protected string $key;

    public function __construct({{ service_name }} $service)
    {
        $this->service = $service;
        $this->key = '{{ name }}';
    }

    /**
     * Display a listing of the resource.
     *
     * @return JsonResponse
     */
    public function index(): JsonResponse
    {
        $data = $this->service->index();
        return !isset($data['error']) ? $this->successResponse($data, 'All ' . $this->key . 's retrieved successfully') : $this->errorResponse('Cannot fetch ' . $this->key . 's', 404, $data['error']);
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     * @return JsonResponse
     */
    public function show(int $id): JsonResponse
    {
        $data = $this->service->show($id);
        return !isset($data['error']) ? $this->successResponse($data, $this->key . ' details retrieved successfully') : $this->notFoundResponse('Cannot fetch ' . $this->key);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param {{ store_request }} $request
     * @return JsonResponse
     */
    public function store({{ store_request }} $request): JsonResponse
    {
        $data = $this->service->store($request->validated());
        return !isset($data['error']) ? $this->successResponse($data, $this->key . ' created successfully', 201) : $this->errorResponse('Cannot create ' . $this->key, 400, $data['error']);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param {{ update_request }} $request
     * @param int $id
     * @return JsonResponse
     */
    public function update({{ update_request }} $request, int $id): JsonResponse
    {
        $data = $this->service->update($request->validated(), $id);
        return !isset($data['error']) ? $this->successResponse($data, $this->key . ' updated successfully') : $this->errorResponse('Cannot update ' . $this->key, 400, $data['error']);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     * @return JsonResponse
     */
    public function destroy(int $id): JsonResponse
    {
        $data = $this->service->destroy($id);
        return !isset($data['error']) ? $this->successResponse($data, $this->key . ' deleted successfully') : $this->errorResponse('Cannot delete ' . $this->key, 400, $data['error']);
    }
}
